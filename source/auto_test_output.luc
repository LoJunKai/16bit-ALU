module auto_test_output (
    input auto_case[4],
    output auto_pass_fail, // 1bit pass/fail
    output auto_X[16],
    output auto_Y[16],
    output alu_ans[16], // 16bit ans
    output alufn_pass[6]
  ) {

  sig alufn[6];
  sig x[16];
  sig y[16];
  sig nxor[16];
  sig auto_ans[16];

  alucalc calculate;
  
  always {

    // Test cases
    case(auto_case){
      0: //add
        alufn = 6b000000;
        x = 16h0f0f;
        y = 16hf0f0;
        auto_ans = 16hffff;

      1: // sub
        alufn = 6b000001;
        x = 16hffff;
        y = 16hf00f;
        auto_ans = 16h0ff0;
       
      2: // AND
        alufn = 6b011000;
        x = 16hfff0;
        y = 16h0fff;
        auto_ans = 16h0ff0;
       
      3: // OR
        alufn = 6b011110;
        x = 16hf0f0;
        y = 16hff00;
        auto_ans = 16hfff0;
       
      4: // XOR
        alufn = 6b010110;
        x = 16haaaa;
        y = 16h5555;
        auto_ans = 16hffff;
       
      5: // "A"(LDR)
        alufn = 6b011010;
        x = 16h0ff0;
        y = 16h0004;
        auto_ans = 16h0ff0;
       
      6: // SHL
        alufn = 6b100000;
        x = 16h00ff;
        y = 16h0004;
        auto_ans = 16h0ff0;
       
      7: // SHR
        alufn = 6b100001;
        x = 16hff00;
        y = 16h0004;
        auto_ans = 16h0ff0;
       
      8: // SRA
        alufn = 6b100011;
        x = 16hff00;
        y = 16h0004;
        auto_ans = 16hfff0;
       
      9: // CMPEQ
        alufn = 6b110011;
        x = 16h0ff0;
        y = 16h0ff0;
        auto_ans = 16h0001;
       
      10: // CMPLT
        alufn = 6b110101;
        x = 16h0ff0;
        y = 16h000f;
        auto_ans = 16h0001;
       
      11: // CMPLE
        alufn = 6b110111;
        x = 16h0ff0;
        y = 16h000f;
        auto_ans = 16h0001;
       
      12: // MUL
        alufn = 6b000010;
        x = 16h0ff0;
        y = 16h0004;
        auto_ans = 16h3fc0;
        
      13: // Invalid ADD
        alufn = 6b000000;
        x = 16h0f00;
        y = 16hf0f0;
        auto_ans = 16hffff;
        
      14: // Invalid AND
        alufn = 6b011000;
        x = 16hfff0;
        y = 16h0fff;
        auto_ans = 16hfff0;

      default:
        // Undefined case -> auto_pass_fail = fail;
        alufn = 6h00;
        x = 16h00;
        y = 16h00;
        auto_ans = 16hff; // To force a fail case
    }

    // Pass x, y and alufn into ALU
    calculate.x = x;
    calculate.io_dip = $build(c{2h0, alufn, y}, 3);
    
    // Outputs
    alu_ans = calculate.out;
    auto_X = x;
    auto_Y = y;
    alufn_pass = alufn; // For invalidy checker

    // Compare ALU output and model ans
    // not (output[16] ^ auto_ans) -> 0 only when they do not match
    // & all the bits from above -> 1 only when they all are 1 (all match)
    nxor = ~(calculate.out ^ auto_ans);
    auto_pass_fail = &(nxor);
  }
}

