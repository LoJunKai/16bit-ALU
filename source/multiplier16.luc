module multiplier16 (
    input x[16],
    input y[16],
    output p[16]
  ) {
  multiply_single_layer mult[16]; //generates 16 "layers" of full adders for the multiplication
  always {
    p[0] = x[0] && y[0];
    
    mult.a[1][0] = 0;
    mult.b[1][0] = 0;
    mult.a[1][15:1] = x[15:1]&&15x{y[0]};
    mult.b[1][15:1] = x[14:0]&&15x{y[1]};
    p[1] = mult.s[1][1];
    
    mult.a[2][1:0] = 2b0;
    mult.b[2][1:0] = 2b0;
    mult.a[2][15:2] = x[13:0]&&14x{y[2]};
    mult.b[2][15:2] = mult.s[1][15:2];
    p[2] = mult.s[2][2];
    
    mult.a[3][2:0] = 3b0;
    mult.b[3][2:0] = 3b0;
    mult.a[3][15:3] = x[12:0]&&13x{y[3]};
    mult.b[3][15:3] = mult.s[2][15:3];
    p[3] = mult.s[3][3];
    
    mult.a[4][3:0] = 4b0;
    mult.b[4][3:0] = 4b0;
    mult.a[4][15:4] = x[11:0]&&12x{y[4]};
    mult.b[4][15:4] = mult.s[3][15:4];
    p[4] = mult.s[4][4];
    
    mult.a[5][4:0] = 5b0;
    mult.b[5][4:0] = 5b0;
    mult.a[5][15:5] = x[10:0]&&11x{y[5]};
    mult.b[5][15:5] = mult.s[4][15:5];
    p[5] = mult.s[5][5];
    
    mult.a[6][5:0] = 6b0;
    mult.b[6][5:0] = 6b0;
    mult.a[6][15:6] = x[9:0]&&10x{y[6]};
    mult.b[6][15:6] = mult.s[5][15:6];
    p[6] = mult.s[6][6];
    
    mult.a[7][6:0] = 7b0;
    mult.b[7][6:0] = 7b0;
    mult.a[7][15:7] = x[8:0]&&9x{y[7]};
    mult.b[7][15:7] = mult.s[6][15:7];
    p[7] = mult.s[7][7];
    
    mult.a[8][7:0] = 8b0;
    mult.b[8][7:0] = 8b0;
    mult.a[8][15:8] = x[7:0]&&8x{y[8]};
    mult.b[8][15:8] = mult.s[7][15:8];
    p[8] = mult.s[8][8];
    
    mult.a[9][8:0] = 9b0;
    mult.b[9][8:0] = 9b0;
    mult.a[9][15:9] = x[6:0]&&7x{y[9]};
    mult.b[9][15:9] = mult.s[8][15:9];
    p[9] = mult.s[9][9];
    
    mult.a[10][9:0] = 10b0;
    mult.b[10][9:0] = 10b0;
    mult.a[10][15:10] = x[5:0]&&6x{y[10]};
    mult.b[10][15:10] = mult.s[9][15:10];
    p[10] = mult.s[10][10];
    
    mult.a[11][10:0] = 11b0;
    mult.b[11][10:0] = 11b0;
    mult.a[11][15:11] = x[4:0]&&5x{y[11]};
    mult.b[11][15:11] = mult.s[10][15:11];
    p[11] = mult.s[11][11];
    
    mult.a[12][11:0] = 12b0;
    mult.b[12][11:0] = 12b0;
    mult.a[12][15:12] = x[3:0]&&4x{y[12]};
    mult.b[12][15:12] = mult.s[11][15:12];
    p[12] = mult.s[12][12];
    
    mult.a[13][12:0] = 13b0;
    mult.b[13][12:0] = 13b0;
    mult.a[13][15:13] = x[2:0]&&3x{y[13]};
    mult.b[13][15:13] = mult.s[12][15:13];
    p[13] = mult.s[13][13];
    
    mult.a[14][13:0] = 14b0;
    mult.b[14][13:0] = 14b0;
    mult.a[14][15:14] = x[1:0]&&2x{y[14]};
    mult.b[14][15:14] = mult.s[13][15:14];
    p[14] = mult.s[14][14];
    
    mult.a[15][14:0] = 15b0;
    mult.b[15][14:0] = 15b0;
    mult.a[15][15] = x[0]&&1x{y[15]};
    mult.b[15][15] = mult.s[14][15];
    p[15] = mult.s[15][15];
  }
}