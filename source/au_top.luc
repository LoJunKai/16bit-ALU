module au_top (
    input clk,
    input rst_n,
    input io_dip [3][8],
    input io_button [5],
    output io_led [3][8],
    output io_seg [8],
    output io_sel [4],
    
    // Not used
    output led [8],
    input usb_rx,
    output usb_tx
  ) {
  
  sig rst; // Reset the Auto counter
  sig activateAuto; // Swtich for Auto or Manual mode
  sig alufn[6]; // Store the alufn signals
  
  .clk(clk){
    dff state(#INIT(0)); // Denote if state is storing or evaluating
    dff storeX[16];
    button_conditioner button_cond;
    reset_conditioner reset_cond;
    edge_detector button_edge(#RISE(1), #FALL(0)); //detect on rising edge only
    
    .rst(rst){
      auto_tester auto_test;
    }

  }
  
  alucalc calculate;  // 16bit ALU module
  alufn_checker alufn_validity;
  
  always {
    // Unused
    usb_tx = usb_rx;
    led = 8h00;
    
    // Set default start state
    io_seg = 8h00;
    io_sel = 4hf;
    io_led = 3x{{8hff}};
    
    calculate.x = 16h00;
    calculate.io_dip = 3x{{8h00}};
    activateAuto = io_dip[2][7];

    // Setup conditioners
    reset_cond.in = ~rst_n;
    rst = reset_cond.out;
    
    button_cond.in = io_button[1];  // Middle button being used
    button_edge.in = button_cond.out;
    
    // Flip state when button pressed
    if (button_edge.out) {
      state.d = ~state.q;
    }
    
    // Main action over here
    if (activateAuto) {
      // Auto mode - go check out auto_tester module
      io_led = auto_test.io_dip;
      io_seg = auto_test.io_seg;
      io_sel = auto_test.io_sel;
      alufn = auto_test.alufn;
      
    } else if (state.q){
      // Calculate mode - go check out alucalc module
      
      // Put in x, y, alufn into ALU
      calculate.x = storeX.q;
      calculate.io_dip = io_dip[2:0];
      
      // Store alufn for validity checker
      alufn = io_dip[2][5:0];
      
      // Output to led -> right 2 most shows 16bit output
      io_led[1:0] = $build(calculate.out, 2); // $build changes 16bits to 2x 8bits arrays
      io_led[2] = 8h00;
      
      // z, v, n
      io_led[2][0] = calculate.z;
      io_led[2][1] = calculate.v;
      io_led[2][2] = calculate.n;
      
    } else {
      // Enter mode -> store inputs into dff
      storeX.d = $flatten(io_dip[1:0]);  // $flatten changes 2x 8bits arrays into 16bits
      alufn = 6h11; // Invalid alufn since starting state -> led lights up
    }
    
    // Check for invalid ALUFN signals
    alufn_validity.alufn = alufn;
  
    // When invalid, light up the 3rd led from the left
    io_led[2][5] = alufn_validity.invalid;
    
  }
}
 