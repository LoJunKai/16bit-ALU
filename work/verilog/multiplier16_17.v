/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier16_17 (
    input [15:0] x,
    input [15:0] y,
    output reg [15:0] p
  );
  
  
  
  wire [(5'h10+0)*16-1:0] M_mult_s;
  reg [(5'h10+0)*16-1:0] M_mult_a;
  reg [(5'h10+0)*16-1:0] M_mult_b;
  
  genvar GEN_mult0;
  generate
  for (GEN_mult0=0;GEN_mult0<5'h10;GEN_mult0=GEN_mult0+1) begin: mult_gen_0
    multiply_single_layer_23 mult (
      .a(M_mult_a[GEN_mult0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .b(M_mult_b[GEN_mult0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .s(M_mult_s[GEN_mult0*(5'h10)+(5'h10)-1-:(5'h10)])
    );
  end
  endgenerate
  
  always @* begin
    p[0+0-:1] = x[0+0-:1] && y[0+0-:1];
    M_mult_a[16+0+0-:1] = 1'h0;
    M_mult_b[16+0+0-:1] = 1'h0;
    M_mult_a[16+1+14-:15] = x[1+14-:15] && {4'hf{y[0+0-:1]}};
    M_mult_b[16+1+14-:15] = x[0+14-:15] && {4'hf{y[1+0-:1]}};
    p[1+0-:1] = M_mult_s[16+1+0-:1];
    M_mult_a[32+0+1-:2] = 2'h0;
    M_mult_b[32+0+1-:2] = 2'h0;
    M_mult_a[32+2+13-:14] = x[0+13-:14] && {4'he{y[2+0-:1]}};
    M_mult_b[32+2+13-:14] = M_mult_s[16+2+13-:14];
    p[2+0-:1] = M_mult_s[32+2+0-:1];
    M_mult_a[48+0+2-:3] = 3'h0;
    M_mult_b[48+0+2-:3] = 3'h0;
    M_mult_a[48+3+12-:13] = x[0+12-:13] && {4'hd{y[3+0-:1]}};
    M_mult_b[48+3+12-:13] = M_mult_s[32+3+12-:13];
    p[3+0-:1] = M_mult_s[48+3+0-:1];
    M_mult_a[64+0+3-:4] = 4'h0;
    M_mult_b[64+0+3-:4] = 4'h0;
    M_mult_a[64+4+11-:12] = x[0+11-:12] && {4'hc{y[4+0-:1]}};
    M_mult_b[64+4+11-:12] = M_mult_s[48+4+11-:12];
    p[4+0-:1] = M_mult_s[64+4+0-:1];
    M_mult_a[80+0+4-:5] = 5'h00;
    M_mult_b[80+0+4-:5] = 5'h00;
    M_mult_a[80+5+10-:11] = x[0+10-:11] && {4'hb{y[5+0-:1]}};
    M_mult_b[80+5+10-:11] = M_mult_s[64+5+10-:11];
    p[5+0-:1] = M_mult_s[80+5+0-:1];
    M_mult_a[96+0+5-:6] = 6'h00;
    M_mult_b[96+0+5-:6] = 6'h00;
    M_mult_a[96+6+9-:10] = x[0+9-:10] && {4'ha{y[6+0-:1]}};
    M_mult_b[96+6+9-:10] = M_mult_s[80+6+9-:10];
    p[6+0-:1] = M_mult_s[96+6+0-:1];
    M_mult_a[112+0+6-:7] = 7'h00;
    M_mult_b[112+0+6-:7] = 7'h00;
    M_mult_a[112+7+8-:9] = x[0+8-:9] && {4'h9{y[7+0-:1]}};
    M_mult_b[112+7+8-:9] = M_mult_s[96+7+8-:9];
    p[7+0-:1] = M_mult_s[112+7+0-:1];
    M_mult_a[128+0+7-:8] = 8'h00;
    M_mult_b[128+0+7-:8] = 8'h00;
    M_mult_a[128+8+7-:8] = x[0+7-:8] && {4'h8{y[8+0-:1]}};
    M_mult_b[128+8+7-:8] = M_mult_s[112+8+7-:8];
    p[8+0-:1] = M_mult_s[128+8+0-:1];
    M_mult_a[144+0+8-:9] = 9'h000;
    M_mult_b[144+0+8-:9] = 9'h000;
    M_mult_a[144+9+6-:7] = x[0+6-:7] && {3'h7{y[9+0-:1]}};
    M_mult_b[144+9+6-:7] = M_mult_s[128+9+6-:7];
    p[9+0-:1] = M_mult_s[144+9+0-:1];
    M_mult_a[160+0+9-:10] = 10'h000;
    M_mult_b[160+0+9-:10] = 10'h000;
    M_mult_a[160+10+5-:6] = x[0+5-:6] && {3'h6{y[10+0-:1]}};
    M_mult_b[160+10+5-:6] = M_mult_s[144+10+5-:6];
    p[10+0-:1] = M_mult_s[160+10+0-:1];
    M_mult_a[176+0+10-:11] = 11'h000;
    M_mult_b[176+0+10-:11] = 11'h000;
    M_mult_a[176+11+4-:5] = x[0+4-:5] && {3'h5{y[11+0-:1]}};
    M_mult_b[176+11+4-:5] = M_mult_s[160+11+4-:5];
    p[11+0-:1] = M_mult_s[176+11+0-:1];
    M_mult_a[192+0+11-:12] = 12'h000;
    M_mult_b[192+0+11-:12] = 12'h000;
    M_mult_a[192+12+3-:4] = x[0+3-:4] && {3'h4{y[12+0-:1]}};
    M_mult_b[192+12+3-:4] = M_mult_s[176+12+3-:4];
    p[12+0-:1] = M_mult_s[192+12+0-:1];
    M_mult_a[208+0+12-:13] = 13'h0000;
    M_mult_b[208+0+12-:13] = 13'h0000;
    M_mult_a[208+13+2-:3] = x[0+2-:3] && {2'h3{y[13+0-:1]}};
    M_mult_b[208+13+2-:3] = M_mult_s[192+13+2-:3];
    p[13+0-:1] = M_mult_s[208+13+0-:1];
    M_mult_a[224+0+13-:14] = 14'h0000;
    M_mult_b[224+0+13-:14] = 14'h0000;
    M_mult_a[224+14+1-:2] = x[0+1-:2] && {2'h2{y[14+0-:1]}};
    M_mult_b[224+14+1-:2] = M_mult_s[208+14+1-:2];
    p[14+0-:1] = M_mult_s[224+14+0-:1];
    M_mult_a[240+0+14-:15] = 15'h0000;
    M_mult_b[240+0+14-:15] = 15'h0000;
    M_mult_a[240+15+0-:1] = x[0+0-:1] && {1'h1{y[15+0-:1]}};
    M_mult_b[240+15+0-:1] = M_mult_s[224+15+0-:1];
    p[15+0-:1] = M_mult_s[240+15+0-:1];
  end
endmodule
