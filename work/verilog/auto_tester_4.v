/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_tester_4 (
    input clk,
    input rst,
    output reg [23:0] io_dip,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    output reg [5:0] alufn
  );
  
  
  
  reg [3:0] case_num;
  
  reg [15:0] led_bits;
  
  reg pass_fail;
  
  wire [6-1:0] M_ctr_value;
  counter_8 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_9 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [1-1:0] M_tester_auto_pass_fail;
  wire [16-1:0] M_tester_auto_X;
  wire [16-1:0] M_tester_auto_Y;
  wire [16-1:0] M_tester_alu_ans;
  wire [6-1:0] M_tester_alufn_pass;
  wire [1-1:0] M_tester_z;
  wire [1-1:0] M_tester_v;
  wire [1-1:0] M_tester_n;
  reg [4-1:0] M_tester_auto_case;
  auto_test_output_10 tester (
    .auto_case(M_tester_auto_case),
    .auto_pass_fail(M_tester_auto_pass_fail),
    .auto_X(M_tester_auto_X),
    .auto_Y(M_tester_auto_Y),
    .alu_ans(M_tester_alu_ans),
    .alufn_pass(M_tester_alufn_pass),
    .z(M_tester_z),
    .v(M_tester_v),
    .n(M_tester_n)
  );
  
  wire [8-1:0] M_decimal_decimal;
  reg [4-1:0] M_decimal_binary;
  decimal_counter_11 decimal (
    .binary(M_decimal_binary),
    .decimal(M_decimal_decimal)
  );
  
  always @* begin
    case_num = M_ctr_value[2+3-:4];
    M_decimal_binary = case_num;
    M_seg_values = M_decimal_decimal;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_tester_auto_case = case_num;
    alufn = M_tester_alufn_pass;
    if (M_ctr_value[1+0-:1]) begin
      led_bits = M_tester_alu_ans;
      pass_fail = M_tester_auto_pass_fail;
      io_dip = {pass_fail, ~pass_fail, 3'h0, M_tester_n, M_tester_v, M_tester_z, led_bits};
    end else begin
      if (M_ctr_value[0+0-:1]) begin
        led_bits = M_tester_auto_Y;
      end else begin
        led_bits = M_tester_auto_X;
      end
      io_dip = {8'h00, led_bits};
    end
  end
endmodule
